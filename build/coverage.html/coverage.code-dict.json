{"/home/travis/build/npmtest/node-npmtest-clocker/test.js":"/* istanbul instrument in package npmtest_clocker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clocker/lib.npmtest_clocker.js":"/* istanbul instrument in package npmtest_clocker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_clocker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_clocker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-clocker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-clocker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_clocker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_clocker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_clocker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_clocker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_clocker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_clocker.__dirname + '/lib.npmtest_clocker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clocker/node_modules/clocker/bin/cmd.js":"#!/usr/bin/env node\nvar fs = require('fs');\nvar path = require('path');\nvar mkdirp = require('mkdirp');\nvar minimist = require('minimist');\nvar level = require('level');\nvar strftime = require('strftime');\nvar through = require('through');\nvar editor = require('editor');\nvar stringify = require('json-stable-stringify');\nvar parseTime = require('parse-messy-time');\nvar os = require('os');\nvar tmpdir = (os.tmpdir || os.tmpDir)();\n\nvar argv = minimist(process.argv.slice(2), {\n    alias: { m: 'message', v: 'verbose', a: 'archive', t: 'type' }\n});\nvar HOME = process.env.HOME || process.env.USERPROFILE;\nvar datadir = argv.d || path.join(HOME, '.clocker');\nmkdirp.sync(datadir);\n\nvar db = level(path.join(datadir, 'db'), { valueEncoding: 'json' });\n\nif (argv.h) usage(0)\nelse if (argv._[0] === 'start') {\n    var d = argv.date ? new Date(argv.date) : new Date;\n    var message = argv.message;\n    var type = argv.type;\n    start(d, message, type, error);\n}\nelse if (argv._[0] === 'stop') {\n    var d = argv.date ? new Date(argv.date) : new Date;\n    var k = argv.key || argv._[1];\n    if (k) {\n        var key = getKey(k);\n        db.get(key, function (err, value) {\n            if (err) error(err)\n            else onrowstop({ key: key, value: value })\n        });\n    }\n    else {\n        db.createReadStream({\n            gt: 'time!', lt: 'time!~',\n            limit: 1, reverse: true\n        }).once('data', onrowstop);\n    }\n    function onrowstop (row) {\n        var m = argv.message;\n        if (m) {\n            if (row.value.message) m = row.value.message + '\\n' + m;\n            row.value.message = m;\n        }\n        row.value.end = strftime('%F %T', d);\n        db.put(row.key, row.value, error);\n    }\n}\nelse if (argv._[0] === 'restart') {\n    var k = argv.key || argv._[1];\n    if (k) {\n        db.get(getKey(k), function (err, value) {\n            if (err) error(err);\n            else onrowrestart({ value: value });\n        });\n    }\n    else {\n        getLastRow(onrowrestart);\n    }\n\n    function onrowrestart (row) {\n        start(new Date, row.value.message, row.value.type, error);\n    }\n}\nelse if (argv._[0] === 'add' && argv._.length === 3) {\n    var start = strftime('%F %T', getDate(argv._[1]));\n    var end = strftime('%F %T', getDate(argv._[2]));\n    var message = argv.message;\n    var type = argv.type;\n\n    var value = { type: type, message: message, end: end };\n    var pkey = 'time!' + start;\n    var tkey = 'time-type!' + type + '!' + start;\n\n    db.batch([\n        { type: 'put', key: pkey, value: value },\n        { type: 'put', key: tkey, value: 0 }\n    ], error);\n}\nelse if (argv._[0] === 'status') {\n    var s = db.createReadStream({\n        gt: 'time!', lt: 'time!~',\n        limit: 1, reverse: true\n    });\n    var status = 'stopped';\n    s.once('data', function (row) {\n        var started = new Date(row.key.split('!')[1]);\n        if (!row.value.end) {\n            var elapsed = (new Date) - started;\n            status = 'elapsed time: ' + fmt(elapsed);\n        }\n    });\n    s.once('end', function () {\n        console.log(status);\n    });\n}\nelse if (argv._[0] === 'data') {\n    var type = argv.type || argv._[1];\n    var typeIsRegExp = isRegExp(type);\n    var rate = argv.rate || argv.r || argv._[2];\n    var title = argv.title || 'consulting';\n\n    var s = db.createReadStream({\n        gt: 'time!' + (argv.gt || ''),\n        lt: 'time!' + (argv.lt || '~')\n    });\n    var rows = [];\n    var write = function (row) {\n        if (row.value.archive && !argv.archive) return;\n        if (!type) return rows.push(row);\n        if (row.value.type === type) return rows.push(row)\n        if (typeIsRegExp && testRegExp(type, row.value.type)) return rows.push(row)\n    };\n    s.pipe(through(write, function () {\n        var hours = rows.reduce(function reducer (acc, row) {\n            var start = new Date(row.key.split('!')[1]);\n            var end = row.value.end ? new Date(row.value.end) : new Date;\n            var key = strftime('%F', start);\n            if (key !== strftime('%F', end)) {\n                var nextDay = new Date(start);\n                nextDay.setDate(start.getDate() + 1);\n                nextDay.setHours(0);\n                nextDay.setMinutes(0);\n                nextDay.setSeconds(0);\n                nextDay.setMilliseconds(0);\n\n                acc = reducer(acc, {\n                    key: 'time!' + strftime('%F %T', nextDay),\n                    value: row.value\n                });\n                end = nextDay;\n            }\n            var hours = (end - start) / 1000 / 60 / 60;\n            if (!acc[key]) {\n                acc[key] = {\n                    date: strftime('%F', start),\n                    hours: 0\n                };\n            }\n            acc[key].hours += hours;\n            return acc;\n        }, {});\n\n        console.log(stringify([ {\n            title: title,\n            rate: rate,\n            hours: Object.keys(hours).map(function (key) {\n                var h = hours[key];\n                return {\n                    date: h.date,\n                    hours: Number(h.hours.toFixed(2))\n                };\n            })\n        } ], { space: 2 }));\n    }));\n}\nelse if (argv._[0] === 'csv') {\n    // print header\n    console.log('Key,Date,Start,End,Duration,Archived,Type,Message');\n\n    var s = db.createReadStream({\n        gt: 'time!' + (argv.gt || ''),\n        lt: 'time!' + (argv.lt || '~')\n    });\n    s.on('error', error);\n    s.pipe(through(function (row) {\n        if (row.value.archive && !argv.archive) return;\n        if (argv.type && !isRegExp(argv.type) && row.value.type !== argv.type) return;\n        if (argv.type && isRegExp(argv.type) && !testRegExp(argv.type, row.value.type)) return;\n\n        var start = new Date(row.key.split('!')[1]);\n        var end = row.value.end && new Date(row.value.end);\n        var elapsed = (end ? end : new Date) - start;\n\n        console.log('%s,%s,%s,%s,%s,%s,\"%s\",\"%s\"',\n            toStamp(row.key),\n            strftime('%F', start),\n            strftime('%T', start),\n            end ? strftime('%T', end) : 'NOW',\n            fmt(elapsed),\n            (row.value.archive ? 'A' : ''),\n            (row.value.type || '').replace('\"', '\"\"'),\n            (row.value.message || '').replace('\"', '\"\"')\n        );\n    }));\n}\nelse if (argv._[0] === 'list' || argv._[0] === 'ls') {\n    var s = db.createReadStream({\n        gt: 'time!' + (argv.gt || ''),\n        lt: 'time!' + (argv.lt || '~')\n    });\n    s.on('error', error);\n    s.pipe(through(function (row) {\n        if (argv.raw) return console.log(stringify(row));\n        if (row.value.archive && !argv.archive) return;\n        if (argv.type && !isRegExp(argv.type) && row.value.type !== argv.type) return;\n        if (argv.type && isRegExp(argv.type) && !testRegExp(argv.type, row.value.type)) return;\n\n\n        var start = new Date(row.key.split('!')[1]);\n        var end = row.value.end && new Date(row.value.end);\n        var elapsed = (end ? end : new Date) - start;\n\n        console.log(\n            '%s  %s  [ %s - %s ]  (%s)%s%s',\n            toStamp(row.key),\n            strftime('%F', start),\n            strftime('%T', start),\n            end ? strftime('%T', end) : 'NOW',\n            fmt(elapsed),\n            (row.value.type ? '  [' + row.value.type + ']' : ''),\n            (row.value.archive ? ' A' : '')\n        );\n        if (argv.verbose && row.value.message) {\n            var lines = row.value.message.split('\\n');\n            console.log();\n            lines.forEach(function (line) {\n                console.log('    ' + line);\n            });\n            console.log();\n        }\n    }));\n}\nelse if (argv._[0] === 'get') {\n    var key = getKey(argv._[1]);\n    db.get(key, function (err, row) {\n        if (err) return error(err);\n        console.log(row);\n    });\n}\nelse if (argv._[0] === 'rm') {\n    argv._.slice(1).forEach(function (k) {\n        var key = getKey(k);\n        db.del(key, error);\n    });\n}\nelse if (argv._[0] === 'set') {\n    var stamp;\n    var prop;\n    var value;\n\n    if (argv._.length < 3) {\n        return error('clocker set [STAMP] KEY VALUE');\n    }\n    else if (argv._.length === 3) {\n        getLastRow(function (row) {\n            stamp = row.key.split('!')[1];\n            prop = argv._[1];\n            value = argv._.slice(2).join(' ');\n            set(stamp, prop, value);\n        });\n    }\n    else {\n        stamp = argv._[1];\n        prop = argv._[2];\n        value = argv._.slice(3).join(' ');\n        set(stamp, prop, value);\n    }\n}\nelse if (argv._[0] === 'edit') {\n    var stamp = argv._[1];\n    var key = getKey(stamp);\n    var prop = argv._[2];\n\n    db.get(key, function (err, row) {\n        if (err) return error(err);\n        var src = stringify(prop ? row[prop] : row, { space: 2 });\n        edit(src, function (err, src_) {\n            if (err) return error(err);\n            if (prop) {\n                row[prop] = src_;\n                return set(stamp, prop, row);\n            }\n            row = JSON.parse(src_);\n            try { var x = JSON.parse(src_) }\n            catch (err) {\n                return error('error parsing json');\n            }\n            db.put(key, x, function (err) {\n                if (err) return error(err);\n                if (!x || typeof x !== 'object') {\n                    return error('not an object: ' + x);\n                }\n                if (x.type !== row.type) {\n                    set(stamp, 'type', x.type, row.type);\n                }\n            });\n        });\n    });\n}\nelse if (argv._[0] === 'insert') {\n    var key = getKey(argv._[1]);\n    db.put(key, {}, function (err) {\n        if (err) return error(err);\n    });\n}\nelse if (argv._[0] === 'archive' || argv._[0] === 'unarchive') {\n    var value = argv._[0] === 'archive';\n    if (argv._.length > 1) {\n        return argv._.slice(1).forEach(function (stamp) {\n            set(stamp, 'archive', value);\n        });\n    }\n    var s = db.createReadStream({\n        gt: 'time!' + (argv.gt || ''),\n        lt: 'time!' + (argv.lt || '~')\n    });\n    s.on('error', error);\n    s.pipe(through(function (row) {\n        if (row.value.archive) return;\n        if (argv.type && row.value.type !== argv.type) return;\n\n        row.value.archive = value;\n        db.put(row.key, row.value, error);\n    }));\n}\nelse usage(1)\n\nfunction start (date, message, type, cb) {\n    var pkey = strftime('time!%F %T', d);\n    var tkey = 'time-type!' + type + '!' + strftime('%F %T', d);\n    db.batch([\n        { type: 'put', key: pkey, value: { type: type, message: message } },\n        { type: 'put', key: tkey, value: 0 }\n    ], cb);\n}\n\nfunction edit (src, cb) {\n    var file = path.join(tmpdir, 'clocker-' + Math.random());\n    fs.writeFile(file, src || '', function (err) {\n        if (err) error(err)\n        else editor(file, function (code, sig) {\n            if (code !== 0) {\n                return error('non-zero exit code from $EDITOR');\n            }\n            fs.readFile(file, function (err, src) {\n                if (err) error(err)\n                else cb(null, src)\n            });\n        });\n    });\n}\n\nfunction usage (code) {\n    var rs = fs.createReadStream(__dirname + '/usage.txt');\n    rs.pipe(process.stdout);\n    rs.on('close', function () {\n        if (code) process.exit(code);\n    });\n}\n\nfunction pad (s, len) {\n    return Array(Math.max(0, len - String(s).length + 1)).join('0') + s;\n}\n\nfunction fmt (elapsed) {\n    var n = elapsed / 1000;\n    var hh = pad(Math.floor(n / 60 / 60), 2);\n    var mm = pad(Math.floor(n / 60 % 60), 2);\n    var ss = pad(Math.floor(n % 60), 2);\n    return [ hh, mm, ss ].join(':');\n}\n\nfunction set (stamp, prop, value, originalValue) {\n    var key = getKey(stamp);\n\n    if (prop === 'stop') {\n        // Use 'stop' as synonym for 'end'\n        prop = 'end';\n    }\n\n    if (prop === 'end') {\n        db.get(key, function (err, row) {\n            if (err) return error(err);\n            row[prop] = updateDate(key, value, originalValue || row[prop]);\n            db.put(key, row, error);\n        });\n    }\n    else if (prop === 'start') {\n        db.get(key, function (err, row) {\n            if (err) return error(err);\n            var newKey = 'time!' + updateDate(key, value, key.split('!')[1]);\n\n            db.batch([\n                { type: 'put', key: newKey, value: row },\n                { type: 'del', key: key }\n            ], error);\n        });\n    }\n    else if (prop === 'type') {\n        db.get(key, function (err, row) {\n            if (err) return error(err);\n            var prevType = originalValue || row.type;\n            row.type = value;\n            db.batch([\n                prevType && { type: 'del', key: prevType },\n                { type: 'put', key: key, value: row }\n            ].filter(Boolean), error);\n        });\n    }\n    else {\n        db.get(key, function (err, row) {\n            if (err) return error(err);\n            if (value === '') delete row[prop];\n            else row[prop] = value;\n            db.put(key, row, error);\n        });\n    }\n}\n\nfunction error (err) {\n    if (!err) return;\n    console.error(String(err));\n    process.exit(1);\n}\n\nfunction toStamp (s) {\n    return Math.floor(new Date(s.split('!')[1]).valueOf() / 1000);\n}\n\nfunction getKey (x) {\n    if (!/^\\d+$/.test(x)) return 'time!' + x;\n    return strftime('time!%F %T', new Date(x * 1000));\n}\n\nfunction getLastRow (callback) {\n    db.createReadStream({\n        gt: 'time!', lt: 'time!~',\n        limit: 1, reverse: true\n    }).once('data', callback);\n}\n\nfunction getDate (expr) {\n    var timestamp = Date.parse(expr);\n    var d;\n    if (isNaN(timestamp)) {\n        d = parseTime(expr);\n    }\n    else {\n        d = new Date(timestamp);\n    }\n\n    return d;\n}\n\nfunction updateDate (key, value, old) {\n    var d = getDate(value);\n\n    if (isNaN(d.valueOf())) {\n        if (!old || isNaN(old)) {\n            old = key.split('!')[1];\n        }\n        d = new Date(old.split(' ')[0] + ' ' + value);\n    }\n    return strftime('%F %T', d);\n}\n\nfunction isRegExp (str) {\n    return /^\\/.*\\/$/.test(str);\n}\n\nfunction testRegExp (re, str) {\n    return RegExp(re.slice(1,-1)).test(str);\n}\n"}